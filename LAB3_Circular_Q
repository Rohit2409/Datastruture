 #include<stdio.h>
 #include<conio.h>
  
    int rear=-1, front=0; 
    int size=3; 
    void enQueue(int value); 
    int deQueue(); 
    void displayQueue(); 

  
void enQueue(int value) 
{  int rear, front; 
    int size; 
    int *arr; 
    if ((front == 0 && rear == size-1) || 
            (rear == (front-1)%(size-1))) 
    { 
        printf("\nQueue is Full"); 
        return; 
    } 
  
    else if (front == -1) 
    { 
        front = rear = 0; 
        arr[rear] = value; 
    } 
  
    else if (rear == size-1 && front != 0) 
    { 
        rear = 0; 
        arr[rear] = value; 
    } 
  
    else
    { 
        rear++; 
        arr[rear] = value; 
    } 
} 

int deQueue() 
{  int rear, front; 
    int size; 
    int *arr; 
    if (front == -1) 
    { 
        printf("\nQueue is Empty"); 
        return -1; 
    } 
  
    int data = arr[front]; 
    arr[front] = -1; 
    if (front == rear) 
    { 
        front = -1; 
        rear = -1; 
    } 
    else if (front == size-1) 
        front = 0; 
    else
        front++; 
  
    return data; 
} 
  
void displayQ() 
{  int rear, front; 
    int size; 
    int *arr; 
    if (front == -1) 
    { 
        printf("\nQueue is Empty"); 
        return; 
    } 
    printf("\nElements in Circular Queue are: "); 
    if (rear >= front) 
    { 
        for (int i = front; i <= rear; i++) 
            printf("%d ",arr[i]); 
    } 
    else
    { 
        for (int i = front; i < size; i++) 
            printf("%d ", arr[i]); 
  
        for (int i = 0; i <= rear; i++) 
            printf("%d ", arr[i]); 
    } 
} 
   void main()
{
int choice;
 int rear, front; 
    int size,item; 
    
for(;;)
{
printf("\n1:insertrear\n2:deletefront\n3:display\n4:exit\n");
printf("enter the choice\n");
scanf("%d",&choice);
switch(choice)
{
case 1:printf("enter the item to be inserted\n");
scanf("%d",&item);
enQueue(item);
break;
case 2:item=deQueue();
if(item==-1)
printf("queue is empty\n");
else
printf("item deleted =%d\n",item);
break;
case 3:displayQ();
break;
default:exit(0);
}
}
getch();
    return 0; 
} 
